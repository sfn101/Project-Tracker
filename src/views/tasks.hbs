<div class="px-4 py-6 sm:px-0">
  <div class="sm:flex sm:items-center mb-8">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Tasks</h1>
      <p class="mt-2 text-sm text-gray-700 dark:text-gray-300">View and manage all your tasks across projects.</p>
    </div>
  </div>

  <!-- Filters -->
  <div class="mb-6">
    <div class="flex flex-wrap gap-4">
      <select id="statusFilter"
        class="border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-white">
        <option value="">All Status</option>
        <option value="pending">Pending</option>
        <option value="in_progress">In Progress</option>
        <option value="completed">Completed</option>
      </select>
      <select id="projectFilter"
        class="border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-white">
        <option value="">All Projects</option>
        <!-- Projects will be populated -->
      </select>
    </div>
  </div>

  <!-- Tasks List -->
  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
    <ul id="tasksList" class="divide-y divide-gray-200 dark:divide-gray-700">
      <!-- Tasks will be loaded here -->
    </ul>
  </div>
</div>

<script>
  const user = {{{ userJson }}};
  let allTasks = [];
  let allProjects = [];

  async function loadData() {
    try {
      // Load projects for filter
      const projectsResponse = await apiRequest(`/api/users/${user.id}/projects`);
      allProjects = projectsResponse.data.data || [];

      const projectFilter = document.getElementById('projectFilter');
      projectFilter.innerHTML = '<option value="">All Projects</option>' +
        allProjects.map(project => `<option value="${project._id}">${project.name}</option>`).join('');

      // Load all tasks
      allTasks = [];
      for (const project of allProjects) {
        const tasksResponse = await apiRequest(`/api/users/${user.id}/projects/${project._id}/tasks`);
        const tasks = tasksResponse.data.data || [];
        tasks.forEach(task => {
          task.projectName = project.name;
          task.projectId = project._id;
          allTasks.push(task);
        });
      }

      filterAndDisplayTasks();
    } catch (error) {
      console.error('Failed to load data:', error);
      showToast('Failed to load tasks data', 'error');
    }
  }

  function filterAndDisplayTasks() {
    const statusFilter = document.getElementById('statusFilter').value;
    const projectFilter = document.getElementById('projectFilter').value;

    let filteredTasks = allTasks;

    if (statusFilter) {
      filteredTasks = filteredTasks.filter(task => task.status === statusFilter);
    }

    if (projectFilter) {
      filteredTasks = filteredTasks.filter(task => task.projectId === projectFilter);
    }

    displayTasks(filteredTasks);
  }

  function displayTasks(tasks) {
    const container = document.getElementById('tasksList');
    if (tasks.length === 0) {
      container.innerHTML = `
      <li class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
        No tasks found matching the current filters.
      </li>
    `;
    } else {
      container.innerHTML = tasks.map(task => `
      <li class="px-6 py-4">
        <div class="flex items-center justify-between">
          <div class="flex-1">
            <div class="flex items-center">
              <p class="text-sm font-medium text-gray-900 dark:text-white truncate">${task.name}</p>
              <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${task.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
          task.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
            'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
        }">
                ${task.status.replace('_', ' ')}
              </span>
            </div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Project: ${task.projectName}</p>
          </div>
          <div class="flex items-center space-x-4">
            <select onchange="updateTaskStatus('${task._id}', '${task.projectId}', this.value)" class="text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white">
              <option value="pending" ${task.status === 'pending' ? 'selected' : ''}>Pending</option>
              <option value="in_progress" ${task.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
              <option value="completed" ${task.status === 'completed' ? 'selected' : ''}>Completed</option>
            </select>
            <a href="javascript:void(0)" onclick="navigateWithAuth('/projects/${task.projectId}')" class="text-primary hover:text-secondary text-sm">View Project</a>
            <button onclick="deleteTask('${task._id}', '${task.projectId}')" class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm">Delete</button>
          </div>
        </div>
      </li>
    `).join('');
    }
  }

  async function updateTaskStatus(taskId, projectId, status) {
    try {
      await apiRequest(`/api/users/${user.id}/projects/${projectId}/tasks/${taskId}`, {
        method: 'PUT',
        body: JSON.stringify({ status })
      });
      // Update local data
      const task = allTasks.find(t => t._id === taskId);
      if (task) task.status = status;
      filterAndDisplayTasks();
    } catch (error) {
      console.error('Failed to update task:', error);
      showToast('Failed to update task: ' + error.message, 'error');
      loadData(); // Reload to revert changes
    }
  }

  async function deleteTask(taskId, projectId) {
    if (!confirm('Are you sure you want to delete this task?')) return;

    try {
      await apiRequest(`/api/users/${user.id}/projects/${projectId}/tasks/${taskId}`, {
        method: 'DELETE'
      });
      allTasks = allTasks.filter(t => t._id !== taskId);
      filterAndDisplayTasks();
    } catch (error) {
      console.error('Failed to delete task:', error);
      showToast('Failed to delete task: ' + error.message, 'error');
    }
  }

  // Initialize when page is ready
  document.addEventListener('DOMContentLoaded', function () {
    // Event listeners for filters
    document.getElementById('statusFilter').addEventListener('change', filterAndDisplayTasks);
    document.getElementById('projectFilter').addEventListener('change', filterAndDisplayTasks);

    // Load initial data
    loadData();
  });
</script>