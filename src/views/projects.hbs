<div class="px-4 py-6 sm:px-0">
  <div class="sm:flex sm:items-center mb-8">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Projects</h1>
      <p class="mt-2 text-sm text-gray-700 dark:text-gray-300">Manage your projects and track their progress.</p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <button onclick="openCreateModal()"
        class="inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        New Project
      </button>
    </div>
  </div>

  <!-- Projects Grid -->
  <div id="projectsContainer" class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    <!-- Projects will be loaded here -->
  </div>
</div>

<!-- Create Project Modal -->
<div id="createModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
  onclick="closeCreateModal()">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800"
    onclick="event.stopPropagation()">
    <div class="mt-3">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Create New Project</h3>
      <form id="createProjectForm">
        <div class="mb-4">
          <label for="projectName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Project
            Name</label>
          <input type="text" id="projectName" name="name" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="projectDescription"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300">Description</label>
          <textarea id="projectDescription" name="description" rows="3" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"></textarea>
        </div>
        <div class="mb-4">
          <label for="projectStatus" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Status</label>
          <select id="projectStatus" name="status"
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
            <option value="pending">Pending</option>
            <option value="in_progress">In Progress</option>
            <option value="completed">Completed</option>
          </select>
        </div>
        <div class="flex justify-end space-x-3">
          <button type="button" onclick="closeCreateModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600">Cancel</button>
          <button type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-secondary">Create</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const user = {{{ userJson }}};

  async function loadProjects() {
    try {
      const response = await apiRequest(`/api/users/${user.id}/projects`);
      const projects = response.data.data || [];

      const container = document.getElementById('projectsContainer');
      if (projects.length === 0) {
        container.innerHTML = `
        <div class="col-span-full text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No projects</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by creating a new project.</p>
          <div class="mt-6">
            <button onclick="openCreateModal()" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary hover:bg-secondary">
              <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              New Project
            </button>
          </div>
        </div>
      `;
      } else {
        container.innerHTML = projects.map(project => `
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
          <div class="p-6">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white truncate">${project.name}</h3>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${project.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
            project.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
              'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }">
                ${project.status.replace('_', ' ')}
              </span>
            </div>
            <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">${project.description}</p>
            <div class="mt-4 flex items-center justify-between">
              <div class="text-sm text-gray-500 dark:text-gray-400">
                Created ${new Date(project.createdAt).toLocaleDateString()}
              </div>
              <div class="flex space-x-2">
                <a href="javascript:void(0)" onclick="navigateWithAuth('/projects/${project._id}')" class="text-primary hover:text-secondary text-sm font-medium">View Details</a>
                <button onclick="deleteProject('${project._id}')" class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm font-medium">Delete</button>
              </div>
            </div>
          </div>
        </div>
      `).join('');
      }
    } catch (error) {
      console.error('Failed to load projects:', error);
      showToast('Failed to load projects', 'error');
    }
  }

  function openCreateModal() {
    document.getElementById('createModal').classList.remove('hidden');
  }

  function closeCreateModal() {
    document.getElementById('createModal').classList.add('hidden');
    document.getElementById('createProjectForm').reset();
  }

  document.getElementById('createProjectForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const projectData = Object.fromEntries(formData);

    try {
      await apiRequest(`/api/users/${user.id}/projects`, {
        method: 'POST',
        body: JSON.stringify(projectData)
      });
      closeCreateModal();
      loadProjects();
    } catch (error) {
      alert('Failed to create project: ' + error.message);
    }
  });

  async function deleteProject(projectId) {
    if (!confirm('Are you sure you want to delete this project?')) return;

    try {
      await apiRequest(`/api/users/${user.id}/projects/${projectId}`, {
        method: 'DELETE'
      });
      loadProjects();
    } catch (error) {
      alert('Failed to delete project: ' + error.message);
    }
  }

  // Load projects when page is ready
  document.addEventListener('DOMContentLoaded', function () {
    loadProjects();
  });
</script>