<div class="px-4 py-6 sm:px-0">
  <div class="sm:flex sm:items-center mb-8">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">User Management</h1>
      <p class="mt-2 text-sm text-gray-700 dark:text-gray-300">Manage all users in the system.</p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <button onclick="openCreateModal()"
        class="inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
        </svg>
        Add User
      </button>
    </div>
  </div>

  <!-- Users Table -->
  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
    <ul id="usersList" class="divide-y divide-gray-200 dark:divide-gray-700">
      <!-- Users will be loaded here -->
    </ul>
  </div>
</div>

<!-- Create User Modal -->
<div id="createModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
  onclick="closeCreateModal()">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800"
    onclick="event.stopPropagation()">
    <div class="mt-3">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Add New User</h3>
      <form id="createUserForm">
        <div class="mb-4">
          <label for="userName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
          <input type="text" id="userName" name="name" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="userEmail" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input type="email" id="userEmail" name="email" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="userPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
          <input type="password" id="userPassword" name="password" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="userRole" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Role</label>
          <select id="userRole" name="role"
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div class="flex justify-end space-x-3">
          <button type="button" onclick="closeCreateModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600">Cancel</button>
          <button type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-secondary">Create</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit User Modal -->
<div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
  onclick="closeEditModal()">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800"
    onclick="event.stopPropagation()">
    <div class="mt-3">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Edit User</h3>
      <form id="editUserForm">
        <input type="hidden" id="editUserId">
        <div class="mb-4">
          <label for="editUserName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
          <input type="text" id="editUserName" name="name" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="editUserEmail" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input type="email" id="editUserEmail" name="email" required
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
        </div>
        <div class="mb-4">
          <label for="editUserPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300">New
            Password</label>
          <input type="password" id="editUserPassword" name="password"
            placeholder="Leave empty to keep current password"
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Leave empty to keep the current password</p>
        </div>
        <div class="mb-4">
          <label for="editUserRole" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Role</label>
          <select id="editUserRole" name="role"
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div class="mb-4">
          <label for="editUserStatus" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Status</label>
          <select id="editUserStatus" name="status"
            class="mt-1 block w-full border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        <div class="flex justify-end space-x-3">
          <button type="button" onclick="closeEditModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600">Cancel</button>
          <button type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-secondary">Update</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const user = {{{ userJson }}};

  async function loadUsers() {
    try {
      const response = await apiRequest('/api/users');
      const users = response.data.data || [];

      const container = document.getElementById('usersList');
      if (users.length === 0) {
        container.innerHTML = `
        <li class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
          No users found.
        </li>
      `;
      } else {
        container.innerHTML = users.map(user => `
        <li class="px-6 py-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <div>
                <p class="text-sm font-medium text-gray-900 dark:text-white">${user.name}</p>
                <p class="text-sm text-gray-500 dark:text-gray-400">${user.email}</p>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.role === 'admin' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' :
            'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
          }">
                ${user.role}
              </span>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
            'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }">
                ${user.status}
              </span>
              <button onclick="editUser('${user._id}')" class="text-primary hover:text-secondary text-sm">Edit</button>
              <button onclick="deleteUser('${user._id}')" class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm">Delete</button>
            </div>
          </div>
        </li>
      `).join('');
      }
    } catch (error) {
      console.error('Failed to load users:', error);
      showToast('Failed to load users', 'error');
    }
  }

  function openCreateModal() {
    document.getElementById('createModal').classList.remove('hidden');
  }

  function closeCreateModal() {
    document.getElementById('createModal').classList.add('hidden');
    document.getElementById('createUserForm').reset();
  }

  document.getElementById('createUserForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const userData = Object.fromEntries(formData);

    try {
      await apiRequest('/api/users', {
        method: 'POST',
        body: JSON.stringify(userData)
      });
      closeCreateModal();
      loadUsers();
      showToast('User created successfully', 'success');
    } catch (error) {
      console.error('Failed to create user:', error);
      showToast('Failed to create user: ' + error.message, 'error');
    }
  });

  async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user?')) return;

    try {
      await apiRequest(`/api/users/${userId}`, {
        method: 'DELETE'
      });
      loadUsers();
      showToast('User deleted successfully', 'success');
    } catch (error) {
      console.error('Failed to delete user:', error);
      showToast('Failed to delete user: ' + error.message, 'error');
    }
  }

  async function editUser(userId) {
    try {
      const response = await apiRequest(`/api/users/${userId}`);
      const userData = response.data;

      document.getElementById('editUserId').value = userData._id;
      document.getElementById('editUserName').value = userData.name;
      document.getElementById('editUserEmail').value = userData.email;
      document.getElementById('editUserPassword').value = ''; // Clear password field
      document.getElementById('editUserRole').value = userData.role;
      document.getElementById('editUserStatus').value = userData.status;

      document.getElementById('editModal').classList.remove('hidden');
    } catch (error) {
      console.error('Failed to load user data:', error);
      showToast('Failed to load user data: ' + error.message, 'error');
    }
  }

  function closeEditModal() {
    document.getElementById('editModal').classList.add('hidden');
    document.getElementById('editUserForm').reset();
  }

  document.getElementById('editUserForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const userId = document.getElementById('editUserId').value;
    const formData = new FormData(e.target);
    const userData = Object.fromEntries(formData);

    // Remove password from payload if it's empty
    if (!userData.password || userData.password.trim() === '') {
      delete userData.password;
    }

    try {
      await apiRequest(`/api/users/${userId}`, {
        method: 'PUT',
        body: JSON.stringify(userData)
      });
      closeEditModal();
      loadUsers();
      showToast('User updated successfully', 'success');
    } catch (error) {
      console.error('Failed to update user:', error);
      showToast('Failed to update user: ' + error.message, 'error');
    }
  });

  // Load users when page is ready
  document.addEventListener('DOMContentLoaded', function () {
    loadUsers();
  });
</script>