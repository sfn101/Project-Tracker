<style>
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }
</style>

<div class="px-4 py-6 sm:px-0">
  <div class="mb-8 sm:flex sm:items-center sm:justify-between">
    <div>
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Admin Dashboard</h1>
      <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">System overview and management</p>
      <p class="mt-1 text-xs text-gray-500 dark:text-gray-500" id="lastUpdated">Loading...</p>
    </div>
    <div class="mt-4 sm:mt-0">
      <button onclick="refreshDashboard()"
        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
        <svg id="refreshIcon" class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15">
          </path>
        </svg>
        <span id="refreshText">Refresh Data</span>
      </button>
    </div>
  </div>

  <!-- System Stats -->
  <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      <div class="p-5">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z">
              </path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Total Users</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white" id="totalUsers">0</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      <div class="p-5">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z">
              </path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Total Projects</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white" id="totalProjects">0</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      <div class="p-5">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2">
              </path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Total Tasks</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white" id="totalTasks">0</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      <div class="p-5">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Completed Tasks</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white" id="completedTasks">0</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-8">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">Admin Actions</h3>
      <div class="flex flex-wrap gap-4">
        <a href="javascript:void(0)" onclick="navigateWithAuth('/admin/users')"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-secondary">
          <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z">
            </path>
          </svg>
          Manage Users
        </a>
        <a href="javascript:void(0)" onclick="navigateWithAuth('/admin/projects')"
          class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
          <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z">
            </path>
          </svg>
          View All Projects
        </a>
        <a href="javascript:void(0)" onclick="navigateWithAuth('/admin/tasks')"
          class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
          <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2">
            </path>
          </svg>
          View All Tasks
        </a>
      </div>
    </div>
  </div>

  <!-- Recent Projects and Tasks -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
    <!-- Recent Projects -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Recent Projects</h3>
          <a href="javascript:void(0)" onclick="navigateWithAuth('/admin/projects')"
            class="text-sm text-primary hover:text-secondary">View all →</a>
        </div>
        <div id="recentProjects" class="space-y-3">
          <!-- Recent projects will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Recent Tasks -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Recent Tasks</h3>
          <a href="javascript:void(0)" onclick="navigateWithAuth('/admin/tasks')"
            class="text-sm text-primary hover:text-secondary">View all →</a>
        </div>
        <div id="recentTasks" class="space-y-3">
          <!-- Recent tasks will be loaded here -->
        </div>
      </div>
    </div>
  </div>

  <!-- Recent Activity -->
  <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">Recent Users</h3>
      <div id="recentActivity" class="space-y-4">
        <!-- Activity will be loaded here -->
      </div>
    </div>
  </div>
</div>

<script>
  const user = {{{ userJson }}};

  async function loadAdminDashboard() {
    try {
      // Show loading state
      document.getElementById('totalUsers').textContent = '...';
      document.getElementById('totalProjects').textContent = '...';
      document.getElementById('totalTasks').textContent = '...';
      document.getElementById('completedTasks').textContent = '...';

      const usersResponse = await apiRequest('/api/users');
      const users = usersResponse.data.data || [];
      document.getElementById('totalUsers').textContent = users.length;

      let totalProjects = 0;
      let totalTasks = 0;
      let completedTasks = 0;
      let allProjects = [];
      let allTasks = [];

      for (const userItem of users) {
        try {
          const projectsResponse = await apiRequest(`/api/users/${userItem._id}/projects`);
          const projects = projectsResponse.data.data || [];
          totalProjects += projects.length;

          // Add user info to projects for display
          projects.forEach(project => {
            project.userName = userItem.name;
            project.userEmail = userItem.email;
            project.userId = userItem._id;
            allProjects.push(project);
          });

          for (const project of projects) {
            const tasksResponse = await apiRequest(`/api/users/${userItem._id}/projects/${project._id}/tasks`);
            const tasks = tasksResponse.data.data || [];
            totalTasks += tasks.length;
            completedTasks += tasks.filter(t => t.status === 'completed').length;

            // Add project and user info to tasks for display
            tasks.forEach(task => {
              task.projectName = project.name;
              task.projectId = project._id;
              task.userName = userItem.name;
              task.userEmail = userItem.email;
              task.userId = userItem._id;
              allTasks.push(task);
            });
          }
        } catch (error) {
          // Skip if no access
          console.warn(`Failed to load data for user ${userItem._id}:`, error.message);
        }
      }

      document.getElementById('totalProjects').textContent = totalProjects;
      document.getElementById('totalTasks').textContent = totalTasks;
      document.getElementById('completedTasks').textContent = completedTasks;

      // Display recent projects
      const recentProjectsDiv = document.getElementById('recentProjects');
      const recentProjects = allProjects.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 5);
      if (recentProjects.length === 0) {
        recentProjectsDiv.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No projects yet.</p>';
      } else {
        recentProjectsDiv.innerHTML = recentProjects.map(project => `
          <div class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
            <div class="flex-1">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white">${project.name}</h4>
              <p class="text-xs text-gray-500 dark:text-gray-400">By ${project.userName}</p>
            </div>
            <div class="flex items-center space-x-2">
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${project.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
            project.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
              'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }">
                ${project.status.replace('_', ' ')}
              </span>
            </div>
          </div>
        `).join('');
      }

      // Display recent tasks
      const recentTasksDiv = document.getElementById('recentTasks');
      const recentTasks = allTasks.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 5);
      if (recentTasks.length === 0) {
        recentTasksDiv.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No tasks yet.</p>';
      } else {
        recentTasksDiv.innerHTML = recentTasks.map(task => `
          <div class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
            <div class="flex-1">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white">${task.name}</h4>
              <p class="text-xs text-gray-500 dark:text-gray-400">${task.projectName} • ${task.userName}</p>
            </div>
            <div class="flex items-center space-x-2">
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${task.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
            task.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
              'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }">
                ${task.status.replace('_', ' ')}
              </span>
            </div>
          </div>
        `).join('');
      }

      // Display recent users
      const recentActivityDiv = document.getElementById('recentActivity');
      const recentUsers = users.slice(0, 5);
      if (recentUsers.length === 0) {
        recentActivityDiv.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No users yet.</p>';
      } else {
        recentActivityDiv.innerHTML = recentUsers.map(userItem => `
        <div class="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
          <div>
            <h4 class="text-sm font-medium text-gray-900 dark:text-white">${userItem.name}</h4>
            <p class="text-sm text-gray-500 dark:text-gray-400">${userItem.email}</p>
          </div>
          <div class="flex items-center space-x-2">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${userItem.role === 'admin' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' :
            'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
          }">
              ${userItem.role}
            </span>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${userItem.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
            'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }">
              ${userItem.status}
            </span>
          </div>
        </div>
      `).join('');
      }

      // Update last updated timestamp
      document.getElementById('lastUpdated').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
    } catch (error) {
      console.error('Failed to load admin dashboard:', error);
      showToast('Failed to load dashboard data', 'error');
      document.getElementById('totalUsers').textContent = 'Error';
      document.getElementById('totalProjects').textContent = 'Error';
      document.getElementById('totalTasks').textContent = 'Error';
      document.getElementById('completedTasks').textContent = 'Error';
    }
  }

  async function refreshDashboard() {
    const refreshButton = document.querySelector('button[onclick="refreshDashboard()"]');
    const refreshIcon = document.getElementById('refreshIcon');
    const refreshText = document.getElementById('refreshText');

    // Show loading state
    refreshButton.disabled = true;
    refreshIcon.style.animation = 'spin 1s linear infinite';
    refreshText.textContent = 'Refreshing...';

    try {
      await loadAdminDashboard();
      showToast('Dashboard refreshed successfully', 'success');
    } catch (error) {
      showToast('Failed to refresh dashboard', 'error');
    } finally {
      // Reset button state
      refreshButton.disabled = false;
      refreshIcon.style.animation = '';
      refreshText.textContent = 'Refresh Data';
    }
  }

  // Auto-refresh every 30 seconds
  let autoRefreshInterval;

  function startAutoRefresh() {
    autoRefreshInterval = setInterval(async () => {
      console.log('Auto-refreshing dashboard data...');
      await loadAdminDashboard();
    }, 10000); // 10 seconds for more frequent updates
  }

  function stopAutoRefresh() {
    if (autoRefreshInterval) {
      clearInterval(autoRefreshInterval);
      autoRefreshInterval = null;
    }
  }

  // Load dashboard when page is ready and start auto-refresh
  document.addEventListener('DOMContentLoaded', function () {
    loadAdminDashboard();
    startAutoRefresh();
  });

  // Stop auto-refresh when page is hidden/closed
  document.addEventListener('visibilitychange', function () {
    if (document.hidden) {
      stopAutoRefresh();
    } else {
      startAutoRefresh();
    }
  });
</script>