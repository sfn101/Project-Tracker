<div class="px-4 py-6 sm:px-0">
  <div class="sm:flex sm:items-center mb-8">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">All Tasks</h1>
      <p class="mt-2 text-sm text-gray-700 dark:text-gray-300">View and manage all tasks across the system.</p>
      <p class="mt-1 text-xs text-gray-500 dark:text-gray-500" id="lastUpdated">Loading...</p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <button onclick="refreshTasks()"
        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
        <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15">
          </path>
        </svg>
        Refresh
      </button>
    </div>
  </div>

  <!-- Filters -->
  <div class="mb-6 bg-white dark:bg-gray-800 shadow rounded-lg p-4">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
      <div class="flex flex-col sm:flex-row gap-4">
        <div>
          <label for="statusFilter"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Status</label>
          <select id="statusFilter"
            class="border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white">
            <option value="">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="in_progress">In Progress</option>
            <option value="completed">Completed</option>
          </select>
        </div>
        <div>
          <label for="userFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">User</label>
          <select id="userFilter"
            class="border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white">
            <option value="">All Users</option>
            <!-- Users will be populated here -->
          </select>
        </div>
        <div>
          <label for="projectFilter"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Project</label>
          <select id="projectFilter"
            class="border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white">
            <option value="">All Projects</option>
            <!-- Projects will be populated here -->
          </select>
        </div>
      </div>
      <div class="text-sm text-gray-500 dark:text-gray-400">
        Total: <span id="totalCount">0</span> tasks
      </div>
    </div>
  </div>

  <!-- Tasks Table -->
  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
    <ul id="tasksList" class="divide-y divide-gray-200 dark:divide-gray-700">
      <li class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
        Loading tasks...
      </li>
    </ul>
  </div>
</div>

<script>
  const user = {{{ userJson }}};
  let allTasks = [];
  let allUsers = [];
  let allProjects = [];

  async function loadAllTasks() {
    try {
      // Show loading state
      document.getElementById('tasksList').innerHTML = '<li class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">Loading tasks...</li>';

      // First, get all users
      const usersResponse = await apiRequest('/api/users');
      allUsers = usersResponse.data.data || [];

      // Populate user filter
      const userFilter = document.getElementById('userFilter');
      userFilter.innerHTML = '<option value="">All Users</option>' +
        allUsers.map(u => `<option value="${u._id}">${u.name} (${u.email})</option>`).join('');

      // Get all projects and tasks from all users
      allTasks = [];
      allProjects = [];

      for (const userItem of allUsers) {
        try {
          const projectsResponse = await apiRequest(`/api/users/${userItem._id}/projects`);
          const projects = projectsResponse.data.data || [];

          for (const project of projects) {
            // Add user info to project
            project.userName = userItem.name;
            project.userEmail = userItem.email;
            project.userId = userItem._id;
            allProjects.push(project);

            try {
              const tasksResponse = await apiRequest(`/api/users/${userItem._id}/projects/${project._id}/tasks`);
              const tasks = tasksResponse.data.data || [];

              // Add project and user info to each task
              tasks.forEach(task => {
                task.projectName = project.name;
                task.projectId = project._id;
                task.userName = userItem.name;
                task.userEmail = userItem.email;
                task.userId = userItem._id;
              });

              allTasks.push(...tasks);
            } catch (error) {
              console.warn(`Failed to load tasks for project ${project._id}:`, error.message);
            }
          }
        } catch (error) {
          console.warn(`Failed to load projects for user ${userItem._id}:`, error.message);
        }
      }

      // Populate project filter
      const projectFilter = document.getElementById('projectFilter');
      projectFilter.innerHTML = '<option value="">All Projects</option>' +
        allProjects.map(p => `<option value="${p._id}">${p.name} (${p.userName})</option>`).join('');

      filterAndDisplayTasks();
      document.getElementById('lastUpdated').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;

    } catch (error) {
      console.error('Failed to load tasks:', error);
      showToast('Failed to load tasks', 'error');
      document.getElementById('tasksList').innerHTML = '<li class="px-6 py-4 text-center text-red-500 dark:text-red-400">Failed to load tasks</li>';
    }
  }

  function filterAndDisplayTasks() {
    const statusFilter = document.getElementById('statusFilter').value;
    const userFilter = document.getElementById('userFilter').value;
    const projectFilter = document.getElementById('projectFilter').value;

    let filteredTasks = allTasks;

    if (statusFilter) {
      filteredTasks = filteredTasks.filter(task => task.status === statusFilter);
    }

    if (userFilter) {
      filteredTasks = filteredTasks.filter(task => task.userId === userFilter);
    }

    if (projectFilter) {
      filteredTasks = filteredTasks.filter(task => task.projectId === projectFilter);
    }

    document.getElementById('totalCount').textContent = filteredTasks.length;
    displayTasks(filteredTasks);
  }

  function displayTasks(tasks) {
    const container = document.getElementById('tasksList');
    if (tasks.length === 0) {
      container.innerHTML = `
        <li class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
          No tasks found matching the current filters.
        </li>
      `;
    } else {
      container.innerHTML = tasks.map(task => `
        <li class="px-6 py-4">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="flex items-center">
                <h3 class="text-sm font-medium text-gray-900 dark:text-white">${task.name}</h3>
                <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${task.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
          task.status === 'in_progress' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
            'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
        }">
                  ${task.status.replace('_', ' ')}
                </span>
              </div>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">${task.description || 'No description'}</p>
              <div class="flex items-center mt-2 text-xs text-gray-500 dark:text-gray-400">
                <span>Project: ${task.projectName}</span>
                <span class="mx-2">•</span>
                <span>Owner: ${task.userName} (${task.userEmail})</span>
                <span class="mx-2">•</span>
                <span>Created: ${new Date(task.createdAt).toLocaleDateString()}</span>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <select onchange="updateTaskStatus('${task._id}', '${task.projectId}', '${task.userId}', this.value)" 
                      class="text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white">
                <option value="pending" ${task.status === 'pending' ? 'selected' : ''}>Pending</option>
                <option value="in_progress" ${task.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
                <option value="completed" ${task.status === 'completed' ? 'selected' : ''}>Completed</option>
              </select>
              <a href="javascript:void(0)" onclick="navigateWithAuth('/projects/${task.projectId}')" 
                 class="text-primary hover:text-secondary text-sm">View Project</a>
              <button onclick="deleteTask('${task._id}', '${task.projectId}', '${task.userId}')" 
                      class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm">Delete</button>
            </div>
          </div>
        </li>
      `).join('');
    }
  }

  async function updateTaskStatus(taskId, projectId, userId, status) {
    try {
      await apiRequest(`/api/users/${userId}/projects/${projectId}/tasks/${taskId}`, {
        method: 'PUT',
        body: JSON.stringify({ status })
      });

      // Update local data
      const task = allTasks.find(t => t._id === taskId);
      if (task) task.status = status;
      filterAndDisplayTasks();
      showToast('Task status updated successfully', 'success');
    } catch (error) {
      console.error('Failed to update task:', error);
      showToast('Failed to update task: ' + error.message, 'error');
      loadAllTasks(); // Reload to revert changes
    }
  }

  async function deleteTask(taskId, projectId, userId) {
    if (!confirm('Are you sure you want to delete this task? This action cannot be undone.')) return;

    try {
      await apiRequest(`/api/users/${userId}/projects/${projectId}/tasks/${taskId}`, {
        method: 'DELETE'
      });
      allTasks = allTasks.filter(t => t._id !== taskId);
      filterAndDisplayTasks();
      showToast('Task deleted successfully', 'success');
    } catch (error) {
      console.error('Failed to delete task:', error);
      showToast('Failed to delete task: ' + error.message, 'error');
    }
  }

  async function refreshTasks() {
    showToast('Refreshing tasks...', 'info');
    await loadAllTasks();
    showToast('Tasks refreshed successfully', 'success');
  }

  // Initialize when page is ready
  document.addEventListener('DOMContentLoaded', function () {
    // Event listeners for filters
    document.getElementById('statusFilter').addEventListener('change', filterAndDisplayTasks);
    document.getElementById('userFilter').addEventListener('change', filterAndDisplayTasks);
    document.getElementById('projectFilter').addEventListener('change', filterAndDisplayTasks);

    // Load initial data
    loadAllTasks();
  });
</script>